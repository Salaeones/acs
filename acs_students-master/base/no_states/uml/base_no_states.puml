@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

'class DirectoryDoors {
'- {static} allDoors : Door[]
'+ {static} makeDoors()
'+ {static} findDoorById(id : String) : Door
'}



Area --> "*" Partitions : "topPartition"
DirectoryAreasDoors --> "*" Door : "allDoors"
DirectoryAreasDoors --> "*" Area : "allAreas"
DirectoryUserGroups --> "*" UserGroup : "userGroups"

class DirectoryUserGroups {
- {static} userGroups : UserGroup[]
+ {static} makeUserGroups()
+ {static} findUserByCredential(credential : String) : User
}

class Action {
+LOCK : String
+UNLOCK : String
+UNLOCK_SHORTLY : String
+OPEN : String
+CLOSE :String

}


UserGroup --> "*" User : "users"
UserGroup --> "*" Schedule : "schedule"
Partitions --> "*" Area:Areas

class Schedule{
-days : DayOfWeek[]
-dayFrom : LocalDate
-dayTo : LocalDate
-hourFrom : LocalTime
-hourTo : LocalTime
+Schedule(days : DayOfWeek[], dayFrom : LocalDate, dayTo : LocalDate, hourFrom : LocalTime, hourTo LocalTime)
+authorized(now : LocalDateTime) : boolean
}

Area --> "*" Door : "doors"
class Door {
- id : String
- closed : boolean
- currentState : DoorState
- from : Spaces
- to : Spaces
+ Door(id : String)
+ Door(id : String, from : Spaces, to : Spaces)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
- doAction(action : String)
+ getBigArea(bigArea : Area)
}

class States{
+LOCKED : String
+UNLOCKED : String
+UNLOCKED_SHORTLY : String
+PROPPED : String
}

class User {
- name : String
- credential : String
- userGroup : UserGroup
+ User(name: String, credential: String)
+ toString() : String
}

User --> "+" UserGroup : "userGroups"
Door --> "*" Spaces: "to"
Door --> "*" Spaces: "from"

class UserGroup{
- userGroupName : String
- users : User[]
- actions : String[]
- areas : Area[]
- schedule : Schedule
+ UserGroup( name : String, actions : String[], areas : Area[], schedule : Schedule)
+ addUser(user : User)
}

abstract class Area {
-areaId : String
-allDoors : Door[]
-areaTopPartition: Partitions
+Area(areaId : String, topPartition : Partitions)
+addDoors(doors : Door[])
+addDoors(door : Door)
}
class Partitions extends Area{
-areas : Area[]
+Partitions(id : String, topPartition : Partitions)
+addSpace(area : Area)
+getAreasFromPartition(areas[] : Area)
}
class Spaces extends Area{
+Spaces(id : String, topPartition : Partitions)
}
class DirectoryAreasDoors {
- {static} allAreas : Area[]
- {static} allDoors : Door[]
+ {static} makeAreas()
+ {static} findAreaById(id : String) : Area
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoorsInArea(area : Area) : Door[]
}
abstract class DoorState{
-door : Door
-name : String
+DoorState(door : Door)
+open()
+close()
+lock()
+unlock()
+unlockShortly()
+propped()
}
DoorState --> "*" Door : "door"
class Locked extends DoorState{
+Locked(door : Door)
+open()
+close()
+lock()
+unlock()
+unlockShortly()
}
class Unlocked extends DoorState{
+Unlocked(door : Door)
+open()
+close()
+lock()
+unlock()
}
class UnlockedShortly extends DoorState implements Observer{
-dateTimeUnlocked : LocalDateTime
-clock : Clock
+UnlockedShortly(door : Door)
+open()
+close()
+lock()
+unlock()
+update(o : Observable, arg Object)
}

Observer --> Observable : observes

class Propped extends DoorState{
+Propped(door : Door)
+open()
+close()
}

class Main {
+ {static} main(args : String)
}

class Clock extends Observable{
-instance : Clock
-time : LocalDateTime
-timer : Timer
-period : int
+Clock(clockPeriod : int)
+start()
+stop()
}

note right of Main::main
DirectoryAreasDoors.makeAreas()
DirectoryUserGroups.makeUserGroups()
Webserver.getInstancia()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryAreasDoors
DirectoryAreasDoors -[hidden]right- DirectoryUserGroups
@enduml